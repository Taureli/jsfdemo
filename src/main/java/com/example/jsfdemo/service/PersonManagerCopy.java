package com.example.jsfdemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import javax.enterprise.context.ApplicationScoped;

import com.example.jsfdemo.domain.PersonCopy;

@ApplicationScoped
public class PersonManagerCopy {
	private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTablePerson = "CREATE TABLE Person(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), yob integer)";

    private PreparedStatement addPersonStmt;
    private PreparedStatement deleteAllPersonsStmt;
    private PreparedStatement getAllPersonsStmt;

    private Statement statement;

    public PersonManagerCopy() {
            try {
                    connection = DriverManager.getConnection(url);
                    statement = connection.createStatement();

                    ResultSet rs = connection.getMetaData().getTables(null, null, null,
                                    null);
                    boolean tableExists = false;
                    while (rs.next()) {
                            if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                                    tableExists = true;
                                    break;
                            }
                    }

                    if (!tableExists)
                            statement.executeUpdate(createTablePerson);

                    addPersonStmt = connection
                                    .prepareStatement("INSERT INTO Person (firstName, yob) VALUES (?, ?)");
                    deleteAllPersonsStmt = connection
                                    .prepareStatement("DELETE FROM Person");
                    getAllPersonsStmt = connection
                                    .prepareStatement("SELECT id, firstName, yob FROM Person");

            } catch (SQLException e) {
                    e.printStackTrace();
            }
    }

    Connection getConnection() {
            return connection;
    }

    void clearPersons() {
            try {
                    deleteAllPersonsStmt.executeUpdate();
            } catch (SQLException e) {
                    e.printStackTrace();
            }
    }

    public int addPerson(PersonCopy person) {
            int count = 0;
            try {
                    addPersonStmt.setString(1, person.getfirstName());
                    addPersonStmt.setInt(2, person.getYob());

                    count = addPersonStmt.executeUpdate();

            } catch (SQLException e) {
                    e.printStackTrace();
            }
            return count;
    }

    public List<PersonCopy> getAllPersons() {
            List<PersonCopy> persons = new ArrayList<PersonCopy>();

            try {
                    ResultSet rs = getAllPersonsStmt.executeQuery();

                    while (rs.next()) {
                            PersonCopy p = new PersonCopy();
                            p.setId(rs.getInt("id"));
                            p.setfirstName(rs.getString("firstName"));
                            p.setYob(rs.getInt("yob"));
                            persons.add(p);
                    }

            } catch (SQLException e) {
                    e.printStackTrace();
            }
            return persons;
    }

}

